<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rant on marcfargas.com</title>
    <link>https://www.marcfargas.com/tags/rant/</link>
    <description>Recent content in rant on marcfargas.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2021 
  | Follow on &lt;a href=&#34;https://twitter.com/telenieko&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; 
  | &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-papermod/&#34; target=&#34;_blank&#34;&gt;PaperMod theme&lt;/a&gt; 
  &amp; &lt;a href=&#34;http://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; â™¥</copyright>
    <lastBuildDate>Tue, 11 Jun 2019 12:32:12 +0200</lastBuildDate><atom:link href="https://www.marcfargas.com/tags/rant/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>State of RAD 2019</title>
      <link>https://www.marcfargas.com/2019/06/state-of-rad-2019/</link>
      <pubDate>Tue, 11 Jun 2019 12:32:12 +0200</pubDate>
      
      <guid>https://www.marcfargas.com/2019/06/state-of-rad-2019/</guid>
      <description>Though we are often sold into the idea that software development is better than ever before, the measure of better is open for debate. Surely you now have fancy stuff/words like DevOps, CI/CD, TDD, BDD, and more acronyms than there are three letter agencies in the US government.
But, for those old enough, there was a time when you could build stuff with just a notepad. It &amp;ldquo;got the job done&amp;rdquo;.</description>
      <content:encoded><![CDATA[<p>Though we are often sold into the idea that software development is better than ever before, the measure of better is open for debate. Surely you now have fancy stuff/words like DevOps, CI/CD, TDD, BDD, and more acronyms than there are three letter agencies in the US government.</p>
<p>But, for those old enough, there was a time when you could build stuff with just a notepad. It &ldquo;got the job done&rdquo;.</p>
<p>On the desktop, Microsoft had FoxPro, VB6 or, even, Microsoft Access. I say Microsoft because there was a time that&rsquo;s &ldquo;all&rdquo; there was.</p>
<p>On the web, sure, spaghetti code is ugly but it worked. If you just needed some quick reports, you could drop a script in a cgi-bin folder, do some tables and framesets and move on to the next thing.</p>
<p>Nowadays all this things look more complicated for the &ldquo;amateur&rdquo; software developer. That is, solo developers or small business owners that are not tech-startups.</p>
<p>On our definition of &ldquo;amateur&rdquo; there&rsquo;s nothing simpler than desktop. I have FoxPro 6 apps still running in the office, and the only thing that will kill them is lack of 64bit compatibility. <strong>Zero maintenance</strong>: just a folder with an .exe file to care about. 20 years running. The biggest pain would be updates, but this is internal stuff: just put that folder in a shared drive. You don&rsquo;t even have to care about libraries, there&rsquo;s only one dll&hellip;</p>
<h2 id="the-current-lack-of-a-desktop-story">The current lack of a desktop story</h2>
<p>What is out there that allows you to build a desktop application that will still run 20 years from now? Most business software does not need constant updates and new features, but it needs to be able to be open 5-10 years from now to print a report for a tax audit, for example.</p>
<p>There is no compelling desktop story from anyone.</p>
<p>On the Microsoft side (still major desktop OS): FoxPro is gone, Lightswitch too, VB.NET is not VB6, there&rsquo;s still MS Access.. completely stalled (read: VBA).</p>
<p>You might think of Java: Eclipse RCP is, definitely, not for amateurs, and NetBeans RCP is stalled. Though NetBeans RCP might get a boost now with the donation to Apache, it is not at VFP/VB6 &ldquo;ease of use&rdquo; level.</p>
<p>Then there are a few &ldquo;stories&rdquo; out there that lack something in some ways:</p>
<ul>
<li><a href="https://www.lazarus-ide.org/">Lazarus</a>. If not dealt with it enough to form an opinion, but it is a contender.</li>
<li><a href="https://www.lianja.com/">Lianja</a>. Which promises lots but I&rsquo;m not sure about it&rsquo;s long term maintainability, specialy on desktop deployments. Though this is kind of a gut-guess.</li>
<li><a href="https://www.windev.com/">PC Soft WINDEV</a>. This is probably the best desktop story if seen so far on the last few years. though it&rsquo;s language lacks some features of modern ones, you can get a lot done. Better JSON/REST support would do a lot, which it appears has been cared for in the latest release.</li>
<li><a href="https://www.filemaker.com/">FileMaker</a>. I just hate it&rsquo;s licensing model (per-user), otherwise it&rsquo;d be almost fine, until you want to integrate with other stuff. It makes for amazing interfaces, but it&rsquo;s coding facilities are nowhere near any mainstream language like Python.</li>
</ul>
<p>The Microsoft front is probably the worst as it not only lacks a story, it&rsquo;s changing it every few years (WPF, WinForms, UWP, &hellip;).</p>
<p>Russell Keith-Magee noted on the <a href="https://www.youtube.com/watch?v=ftP5BQh1-YM">PyCon 2019 Keynote</a> that Python lacks a compelling desktop story. I&rsquo;d go further: everyone lacks a compelling desktop story.</p>
<h2 id="the-web-is-no-better">The web is no better</h2>
<p>The web front is not as sad, as long as you know how to setup a web server you can still drop scripts in a cgi-bin folder and go with it.</p>
<p>Web backends for small-scale applications are doable still with PHP, Python, &hellip; though frontend is a completely different matter. Nowadays all &ldquo;has to&rdquo; be JavaScript intensive, React! Angular! which means that most resources available work under that premise.</p>
<p>A CSS framework that does not require you to setup npm, bower or another tool of the day is rare to be seen. Some frameworks that did not presume a bloated frontend before do so now, raising concern about the future of the non-react-non-angular builds. Maybe <a href="https://bulma.io/">Bulma CSS</a> might be an exception, no javascript at all, so not all is lost.</p>
<p>Truth be told, on the web front, there is nothing as easy and straightforward than server side rendered content. Specially if you are on PHP or Python.</p>
<p>There are some promises of rapid application development which, IMHO, are just that: promises. Rapid prototyping would be a more adequate wording.</p>
<ul>
<li><a href="https://openxava.org/">OpenXava</a>, not much to say. You simply need to really understand Java to go further from the basics. And &ldquo;really understand Java&rdquo; is not &ldquo;amateur development&rdquo;.</li>
<li><a href="https://isis.apache.org/">Apache Isis</a>, I personally like it&rsquo;s philosophy a lot. But has the same issue as OpenXava: you really need to understand Java.</li>
<li><a href="https://www.cuba-platform.com/">CUBA Platform</a>, I also happen to like it a lot. You can probably go further than with OpenXava or Isis without knowing a lot of Java, but it&rsquo;s still Java. furthermore, it has that ugly project structure that came from GWT days where you need to work with three separate modules for every &ldquo;module&rdquo; of you app: client, shared, server. That might improve when they move to Vaadin &gt;10, though it&rsquo;s not in the horizon.</li>
</ul>
<p>Java options basically all have the same issue for the amateur developer: once you need to move from &ldquo;prototype&rdquo; to the next stage you really need to understand what&rsquo;s going on under the hood, and that in Java is not easy.</p>
<p>There are quite a few more, but I&rsquo;ll skip them as the point would be the same: there&rsquo;s nothing which will allow you to reliably build a simple CRUD / Line-Of-Business application without having to take care of a lot of infrastucture stuff like databases, web servers, etc.</p>
<h2 id="invasion-of-subscription-model">Invasion of subscription model</h2>
<p>I lied on my last paragraph. There is. WaveMaker, Microsoft PowerApps, Google AppMaker, &hellip; there is a plethora of low-code / no-code solutions out there. But:</p>
<ul>
<li>They are, generaly, cloud based or with super-expensive on-premises options.</li>
<li>They are subscription based and with per-user pricing models.</li>
<li>They use propietary technologies which is the worst lock-in you can voluntarily subject yourself to.</li>
<li>The moment you need to do something out of &ldquo;the normal&rdquo; you will either not be able to do it, end up writting Java, or having to deploy something somewhere and call it via REST.</li>
</ul>
<p>But, more importantly, you can&rsquo;t fire that up 20 years from now and expect it to &ldquo;just work&rdquo; and be able to print some reports. Even if you pay for the applicable subscription fee for 20 years, I doubt you&rsquo;d get there without any code changes, etc.</p>
<p>When integrating those tools, you will probably end up with a serverless function, because it&rsquo;s the easiest thing to deploy. Or a Kubernetes cluster, or anything else. You will be introducing cross dependencies and points of failure which you will then need to monitor and care about. Now imagine having to put that up again in 10 years because a court order asks for some records only avaiable in that (then in the future) legacy system.</p>
<h2 id="conclusions">Conclusions</h2>
<p>I really believe there&rsquo;s a space for such tools to come back to the front lines of application development. Applications that can run on their own either on the desktop or sandboxed in a browser but that do not require an infrastructure setup more than you need a monitor.</p>
<p>Just as I also believe that the next economic crisis (soon to come) will end with lots of the current subscription based businesses moving companies back to things whose operation do not rely on being able to pay the next month&rsquo;s fee.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
